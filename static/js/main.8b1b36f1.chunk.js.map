{"version":3,"sources":["components/Button/Button.js","components/Input/Input.js","components/TodoInput/TodoInput.js","components/TodoCard/TodoCard.js","components/TodoList/TodoList.js","components/Feed/Feed.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","react_default","a","createElement","className","concat","color","onClick","action","text","Input","hasError","onChange","handleChange","value","formValidator","length","TodoInput","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","bind","assertThisInitialized","handleSubmit","clearForm","event","target","setState","addTodo","preventDefault","alt","src","todos","messageDecorator","onSubmit","Input_Input_Input","Button_Button_Button","Component","TodoCard","todo","title","removeTodo","index","TodoList","map","TodoCard_TodoCard_TodoCard","key","created_at","getMilliseconds","Todo","completed","arguments","undefined","Date","persistTodos","payload","JSON","stringify","localStorage","setItem","getStoredTodos","getItem","parse","Feed","t","push","splice","components_TodoInput_TodoInput","components_TodoList_TodoList","App","components_Feed_Feed","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8b1b36f1.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Button.css\";\n\n/**\n * A simple button\n *\n * @param {string} color\n * @param {string} text\n * @param {function} action\n */\nexport const Button = props => {\n  return (\n    <button className={`button ${props.color}`} onClick={props.action}>\n      {props.text}\n    </button>\n  );\n};\n","import React from \"react\";\nimport \"./Input.css\";\n\nexport const Input = props => {\n  let className = \"input\";\n  if (props.hasError) {\n    className = `${className} error`;\n  }\n\n  return (\n    <input\n      className={className}\n      onChange={props.handleChange}\n      value={props.value}\n    />\n  );\n};\n","import React, { Component } from \"react\";\nimport \"./TodoInput.css\";\nimport { Button } from \"../Button/Button\";\nimport { Input } from \"../Input/Input\";\n\nfunction messageDecorator(todos) {\n  const length = todos.length;\n\n  if (length === 0) {\n    return \"No Todos!\";\n  } else {\n    return `${length} Todos`;\n  }\n}\nfunction formValidator(value) {\n  return value.length > 0;\n}\nclass TodoInput extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value: \"\",\n      hasError: false\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.clearForm = this.clearForm.bind(this);\n  }\n  handleChange(event) {\n    const value = event.target.value;\n    this.setState({\n      value: value,\n      hasError: !formValidator(value)\n    });\n  }\n  handleSubmit(event) {\n    const value = this.state.value;\n    if (formValidator(value)) {\n      this.props.addTodo(value);\n      this.clearForm();\n    } else {\n      this.setState({\n        hasError: true\n      });\n    }\n    event.preventDefault();\n  }\n  clearForm() {\n    this.setState({\n      value: \"\"\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"TodoInput\">\n        <div className=\"TodoInput-header\">\n          <img\n            className=\"TodoInput-mascot\"\n            alt=\"betsuni\"\n            src=\"https://cdn.discordapp.com/attachments/511245116871278594/549145630560223232/nishikino_maki_love_live_school_idol_project_and_etc_drawn_by_ikiyouz__0f8800bc2bf59bf9b62cb86f33953.png\"\n          />\n          <div className=\"TodoInput-message\">\n            <span>{messageDecorator(this.props.todos)}</span>\n          </div>\n        </div>\n        <form className=\"TodoInput-input\" onSubmit={this.handleSubmit}>\n          <Input\n            value={this.state.value}\n            handleChange={this.handleChange}\n            hasError={this.state.hasError}\n          />\n          <div className=\"TodoInput-buttons\">\n            <Button text=\"Add Todo\" color=\"pink\" action={this.handleSubmit} />\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default TodoInput;\n","import React from \"react\";\nimport \"./TodoCard.css\";\nimport { Button } from \"../Button/Button\";\n\nexport const TodoCard = props => {\n  return (\n    <article className=\"TodoCard\">\n      <div className=\"TodoCard-content\">\n        <span>{props.todo.title}</span>\n      </div>\n      <div className=\"TodoCard-button\">\n        <Button\n          color=\"pink\"\n          text=\"Complete\"\n          action={() => {\n            props.removeTodo(props.index);\n          }}\n        />\n      </div>\n    </article>\n  );\n};\n","import React, { Component } from \"react\";\nimport \"./TodoList.css\";\nimport { TodoCard } from \"../TodoCard/TodoCard\";\n\nclass TodoList extends Component {\n  render() {\n    return (\n      <div className=\"TodoList\">\n        {this.props.todos.map((todo, index) => {\n          return (\n            <TodoCard\n              todo={todo}\n              key={todo.created_at.getMilliseconds()}\n              index={index}\n              removeTodo={this.props.removeTodo}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nexport default TodoList;\n","import React, { Component } from \"react\";\nimport TodoInput from \"../TodoInput/TodoInput\";\nimport TodoList from \"../TodoList/TodoList\";\nimport \"./Feed.css\";\n\nclass Todo {\n  constructor(title, completed = false, created_at = new Date()) {\n    this.title = title;\n    this.completed = completed;\n    this.created_at = new Date(created_at);\n  }\n}\n\n/**\n * Converts the todos into a JSON object and persists it into localstorage\n * @param {Array} todos\n */\nfunction persistTodos(todos) {\n  const payload = JSON.stringify(todos);\n  localStorage.setItem(\"todos\", payload);\n}\n/**\n * Rehydrates the stored values from localstorage into actual Todo classes\n */\nfunction getStoredTodos() {\n  let todos = localStorage.getItem(\"todos\");\n  if (todos === null) {\n    return [];\n  } else {\n    todos = JSON.parse(todos);\n    todos = todos.map(todo => {\n      return new Todo(todo.title, todo.completed, todo.created_at);\n    });\n    return todos;\n  }\n}\n\nclass Feed extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      todos: getStoredTodos()\n    };\n\n    this.addTodo = this.addTodo.bind(this);\n    this.removeTodo = this.removeTodo.bind(this);\n  }\n  addTodo(title) {\n    const t = new Todo(title);\n    let todos = this.state.todos;\n    todos.push(t);\n    this.setState({\n      todos: todos\n    });\n    persistTodos(todos);\n  }\n  removeTodo(index) {\n    let todos = this.state.todos;\n    todos.splice(index, 1);\n    this.setState({\n      todos: todos\n    });\n    persistTodos(todos);\n  }\n  render() {\n    return (\n      <div className=\"Feed\">\n        <TodoInput addTodo={this.addTodo} todos={this.state.todos} />\n        <TodoList todos={this.state.todos} removeTodo={this.removeTodo} />\n      </div>\n    );\n  }\n}\n\nexport default Feed;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Feed from \"./components/Feed/Feed\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"Maki\">\n        <main className=\"Maki-content\">\n          <Feed />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}